#include<stdio.h>
#include<iostream>
#include <ctype.h>
#include<math.h>
#include<stdlib.h>
#include<string.h>
using namespace std;
char s[50];
int top = -1;
char var[50][50];
char fx[20];
int count0( char infx[] ,int i)
// Function To Check uniqueness of variables in an expression
{
for (int p=0;p<i;p++)
{
if(infx[i]==infx[p])
return 0;
}
 return 1;
}
int varvalcal(char infx[],char vararray[])
// Function counts the number of unique variables and assigns them as elements of array vararray
{
int i,count=0;
for(i=0;infx[i]!='\0';i++)
{
if((((inf
{
char temp;
temp=s[top];
top--;
return (temp);
}
}
int pr(char elem)
// function that returns the priority of the
operators
{
switch (elem) {
case '#':
 return 0;
case '(':
 return 1;
case '+':
 return 2;
case '*':
 return 3;
 case '\'':
 return 4;
}
}
void con(char infx[], char pofx[] )
// Function that converts infix to postfix
{
char ch,c,elem;
int i = 0, k = 0;
printf("\n\nEnter your boolean Expression to be evaluated ( in terms
of variables ) : ");
scanf("%s", infx);
push('#');
while ((ch = infx[i++]) != '\0')
{
 if (ch == '(')
 push(ch);
 else if (isalpha(ch))
 {
 pofx[k] = ch;
 k++;
 }
 else if (ch == ')')
{
 while (s[top] != '(')
 {
 pofx[k] = pop();
 k++;
 if(s[top]=='#')
 {
 cout<<"\n\n INCORRECT EXPRESSION!! \n\n";
 exit(-1);
}
 }
elem = pop();
 }
else
{
 while (pr(s[top]) >= pr(ch))
 {
}
}
for(l=1;temparray[l]!='\0';l++)
{
if(temparray[l]=='\'')
if(temparray[l-1]=='0')
temparray[l-1]='1';
else
temparray[l-1]='0';
}
i=0;
while( (ch=temparray[i++]) != '\0')
{
if(ch=='0'||ch=='1')
push(ch);
else if(ch=='\'')
continue;
 else
 {
 op2=pop();
 op1=pop();
 switch(ch)
 {
 case '+':
 if(op1=='1' || op2=='1' ) push('1');
 else push('0');
 break;
 case '*':
 if( op1=='0' || op2=='0' ) push('0');
 else push('1');
 break;
case '\'':
break;
default:
cout<<"\n\n EXPRESSION CANNOT BE
EVALUATED \n\n";
exit(-1);
 }
 }
}
fx[c] = s[top];
}
}
void ttable(int varc)
// initialises ttable array
{
 int t=pow(2,varc);
 char bit='1';
 for(int j=0;j<pow(2,varc);j++)
 for(int i=0;i<varc;i++)
 {
 for (int j=0;j<t;j++)
 {
 if(j%(int)pow(2,varc-i-1)==0)
 {
 bit=(bit=='1'?bit='0':bit='1');
 }
 var[i][j]=bit;
 }
 }
}
void ttabledisplay(int varc)
// Displays the truthtable
{
 int t=pow(2,varc);
 for(int j=0;j<pow(2,varc);j++)
 {
 for (int i=0;i<varc;i++)
 {
 cout<<var[i][j]<<"\t";
 }
 cout<<"\t"<<fx[j];
 cout<<endl;
 }
 cout<<endl<<endl;
}
void graphdisplay(int varc,char vararray[])
// Displays the simulation graph
{
int cycles,time;
cout<<"Enter Clock Time for Simulation Graph (in multiples of 50 ms)
: " ;
cin>> time;
if(time%50 !=0)
{
cout<<"\n\n Error! Not a multiple of 50 \n\n";
exit(-1);
}
cout<<"Enter the number of cycles : ";
cin>>cycles;
int t=pow(2,varc);
 cout<<endl;
for (int i=0;i<varc;i++)
 {
 cout<<vararray[i]<<"\t";
for(int t=0;t<cycles;t++)
{
for(int j=0;j<pow(2,varc);j++)
 {
 for(int o=0;o<time/50;o++)
 {
 if(var[i][j]=='1')
 printf("-");
else
 printf("_");
 }
 }
 }
cout<<endl<<endl;
}
 cout<<"Fx\t";
for(int t=0;t<cycles;t++)
{
for(int j=0;j<pow(2,varc);j++)
 {
for(int n=0;n<time/50;n++)
 {
 if(fx[j]=='1')
 printf("-");
else
 printf("_");
 }
 }
}
}
int main()
// Main fruntion
{
char infx[50], pofx[50],vararray[10];
con(infx, pofx);
// convert infix to postfix
expression
int variables=varvalcal(infx,vararray);
// count number of variables in the
expression
printf("\n\n Given Infix Expn: %s Postfix Expn: %s \n \n ", infx,
pofx);
ttable(variables);
// Initialises the
truthtable with values
eval(pofx,variables,vararray);
// evaluates the logic expression
for(int i=0;i<=variables;i++)
{
printf("%c\t",vararray[i]);
}
printf("F(x)\n");
ttabledisplay(variables);
// display truthtable
graphdisplay(variables,vararray);
// display simulation graph
return 0;
}
